{"slots": {"0": {"name": "slot1", "type": {"events": [], "methods": []}}, "1": {"name": "slot2", "type": {"events": [], "methods": []}}, "2": {"name": "slot3", "type": {"events": [], "methods": []}}, "3": {"name": "slot4", "type": {"events": [], "methods": []}}, "4": {"name": "slot5", "type": {"events": [], "methods": []}}, "5": {"name": "slot6", "type": {"events": [], "methods": []}}, "6": {"name": "slot7", "type": {"events": [], "methods": []}}, "7": {"name": "slot8", "type": {"events": [], "methods": []}}, "8": {"name": "slot9", "type": {"events": [], "methods": []}}, "9": {"name": "slot10", "type": {"events": [], "methods": []}}, "-1": {"name": "unit", "type": {"events": [], "methods": []}}, "-3": {"name": "player", "type": {"events": [], "methods": []}}, "-2": {"name": "construct", "type": {"events": [], "methods": []}}, "-4": {"name": "system", "type": {"events": [], "methods": []}}, "-5": {"name": "library", "type": {"events": [], "methods": []}}}, "handlers": [{"code": "local content = hub.getContent()\n\nfor i = 1, #content do -- adding weight to the table\n    content[i].weight = math.floor(content[i].quantity * system.getItem(content[i].id).unitMass)\nend\n\nif SortByWeight then\n    table.sort(content, function(a,b) return a.weight > b.weight end) -- sorting table by weight\nelse\n    table.sort(content, function(a,b) return a.quantity > b.quantity end) -- sorting table by quantity\nend\n\nlocal ItemsLimit = 700\nlocal NoIconsLimit = 250\n\nlocal max = #content\nif max > NoIconsLimit then noIcons = true end\nif max > ItemsLimit then max = ItemsLimit end\nlocal total = 0\nlocal screenHubContent = \" local L = {}\"\n\nfor i = 1, max do  \n\n    if content[i].weight > 1000 then content[i].weight = math.floor(content[i].weight/1000) .. \" t\" else content[i].weight = math.floor(content[i].weight) .. \" kg\" end\n\n    local quantity = FormatQuantity(content[i].quantity,system.getItem(content[i].id).type)\n    local name = quantity .. \" \" ..system.getItem(content[i].id).displayNameWithSize\n    if #name > MaxNameLength then name = string.sub(name,1,MaxNameLength)..\".\" end\n\n    if noIcons then\n        screenHubContent = screenHubContent .. [[L[]]..i..[[] = {n = \"]]..name..[[\",w = \"]]..content[i].weight..[[\"}]]\n    else        \n        screenHubContent = screenHubContent .. [[L[]]..i..[[] = {i = \"]]..system.getItem(content[i].id).iconPath..[[\",n = \"]]..name..[[\",w = \"]]..content[i].weight..[[\"}]]\n    end\n\n    if isOre(system.getItem(content[i].id).displayName) and ShowOreValue then\n        total = total + price(system.getItem(content[i].id).displayName)*math.floor(content[i].quantity)        \n    end\n\nend\n\nscreenHubContent = screenHubContent .. \"local OreValue = '\"..reformatInt(total)..\"' \"\n\nfor i = 1, #screens do \n    screens[i].setRenderScript(\"local ScreenType = '\" .. screens[i].name .. \"' \" .. screenVar .. screenHubContent .. screenContent) \nend\n", "filter": {"args": [], "signature": "onContentUpdate()", "slotKey": "0"}, "key": "0"}, {"code": "local Title = \"Title goes here\" --export\nlocal Color = \"50,100,250\" --export: Main color RGB value\nlocal FontColor = \"255,255,250\" --export: Font color RGB value\nlocal ContainerMaxVolume = 3840000 --export: in liters, used for hubs only. Non-hub max volume is retrieved automatically\n--local ListView = true --export: 16 items per page when true, else 8\nlocal ItemsPerPage = 8 --export: 16 icons max per screen (NQ limit) Default values: 8 (IconView) or 16 (ListView)\nlocal IconSize = 60 --export Default: 60 (IconView) or 32 (ListView)\nlocal Font = \"Play\" --export Default: \"Play\" (IconView) or \"RobotoCondensed\" (ListView)\nlocal FontSize = 24 --export Default: 24 (IconView) or 22 (ListView)\nlocal HideUnit = false --export\nMaxNameLength = 50 --export: number of character in items name, over that limit name will be truncated\nSortByWeight = true --export: heaviest items on top, if false will sort by Quantity\n-----------------------------------------------------------------------------------------------------\nShowOreValue = true --export: Calculates value of ores in container, based on prices below\nBauxite = 25 --export: Bauxite market value\nCoal = 25 --export: Coal market value\nQuartz = 25 --export: Quartz market value\nHematite = 25 --export: Hematite market value\nNatron = 25 --export: Natron market value\nChromite = 25 --export: Chromite market value\nLimestone = 25 --export: Limestone market value\nMalachite = 25 --export: Malachite market value\nGarnierite = 140 --export: Garnierite market value\nAcanthite = 128 --export: Acanthite market value\nPetalite = 900 --export: Petalite market value\nPyrite = 900 --export: Pyrite market value\nCryolite = 1880 --export: Cryolite market value\nCobaltite = 2000 --export: Cobaltite market value\nKolbeckite = 2640 --export: Kolbeckite market value\nGold_Nuggets = 1800 --export: Gold_Nuggets market value\nColumbite = 450 --export: Columbite market value\nVanadinite = 950 --export: Vanadinite market value\nIllmenite = 1500 --export: Illmenite market value\nRhodonite = 420 --export: Rhodonite market value\nThoramine = 0 --export: Thoramine market value\n-----------------------------------------------------------------------------------------------------\nlocal version = 0.18\nsystem.print(\"--------------[ ContainerMonitor v\"..version..\" ]--------------\")\nif HideUnit then unit.hideWidget() end\n\nscreens = {}\n\nlocal json = require(\"dkjson\")\n\nfor slot,element in pairs(unit)do -- checking elements in slots\n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getClass then\n            if element.getClass()==\"ScreenUnit\" or element.getClass()==\"ScreenSignUnit\"then \n                screens[#screens+1]=element\n                element.activate()\n                --elseif element.getClass()==\"ScreenSignUnit\"then\n                --signs[#signs+1]=element\n                screens[#screens].name=system.getItem(element.getItemId()).displayNameWithSize\n\n                -- elseif element.getClass()==\"ItemContainer\"then\n\n\n                -- hub=element\n\n            elseif string.find(element.getClass(),\"Container\") then\n                --system.print(element.getMaxVolume())\n                --system.print(element.getClass())\n                if element.getClass() ~= \"ItemContainer\" then ContainerMaxVolume = element.getMaxVolume() end\n                hub=element\n                hub.slot=slot\n                --hub.capacity=\n            else\n                \n            end \n        end \n    end \nend\n\nif hub.slot ~= \"slot1\" then\n    system.print(\"ERROR: container / hub is not linked to first slot\")\n    unit.exit()\nelse\n    system.print(\"Updating in \"..math.floor(hub.updateContent())..\" seconds\")\nend\n\nunit.setTimer(\"upd\",1)\n\nscreenVar = [[\n local Title =  \"]].. Title .. [[\"\n local color1 = {r=]].. Split(FontColor, \",\")[1] .. [[/255,g=]].. Split(FontColor, \",\")[2] .. [[/255,b=]].. Split(FontColor, \",\")[3] .. [[/255 }\n local color2 = {r=]].. Split(Color, \",\")[1] .. [[/255,g=]].. Split(Color, \",\")[2] .. [[/255,b=]].. Split(Color, \",\")[3] .. [[/255 }\n local ContainerMaxVolume = \"]].. ContainerMaxVolume .. [[\"\n local Version = ]].. version .. [[\n local IconsPerPage = ]].. ItemsPerPage .. [[\n local IconSize = ]].. IconSize .. [[\n local ContentFont = loadFont(\"]].. Font .. [[\",]].. FontSize .. [[)\n\n]]\n\n\n\n --local ListView = ]].. tostring(ListView) .. [[\n\n\n\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-1"}, "key": "1"}, {"code": "local ItemsMass = hub.getItemsMass()\n\nif ItemsMass then\n    local json = require(\"dkjson\")\n    local input = {\n        [\"NextUpdate\"] = hub.updateContent(),\n        [\"TotalWeight\"] = reformatInt(math.floor(ItemsMass/1000)),\n        [\"ContainerVolume\"] = hub.getItemsVolume()\n    }\n\n    for i = 1, #screens do\n        screens[i].setScriptInput(json.encode(input))    \n    end\n    \n    --for i = 1, #signs do\n       -- signs[i].setScriptInput(json.encode(input))    \n    --end\nelse\n    unit.exit()\nend", "filter": {"args": [{"value": "upd"}], "signature": "onTimer(tag)", "slotKey": "-1"}, "key": "2"}, {"code": "\nfunction reformatInt(i)\n  return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction FormatQuantity(quantity,itemType)\n    if itemType == \"worldMaterial\" then return math.floor(quantity)..\" m3\"\n    elseif itemType == \"material\" and quantity < 1000 then return math.floor(quantity)..\" L\"\n    elseif itemType == \"material\" and quantity > 1000 then return math.floor(quantity/1000) ..\" kl\" \n    else return math.floor(quantity)\n    end\nend\n\n\nfunction isOre(name)\n     if name == \"Bauxite\" or\n        name == \"Coal\" or\n        name == \"Quartz\" or\n        name == \"Hematite\" or\n        name == \"Natron\" or\n        name == \"Chromite\" or\n        name == \"Limestone\" or\n        name == \"Malachite\" or\n        name == \"Garnierite\" or\n        name == \"Acanthite\" or\n        name == \"Petalite\" or\n        name == \"Pyrite\" or\n        name == \"Cryolite\" or\n        name == \"Cobaltite\" or\n        name == \"Kolbeckite\" or\n        name == \"Gold nuggets\" or\n        name == \"Columbite\" or\n        name == \"Vanadinite\" or\n        name == \"Illmenite\" or\n        name == \"Rhodonite\" or\n        name == \"Thoramine\" then\n        return true\n     else return false\n     end\nend\n\nfunction price(ore)\n     if ore == \"Bauxite\" then return Bauxite elseif\n        ore == \"Coal\" then return Coal elseif\n        ore == \"Quartz\" then return Quartz elseif\n        ore == \"Hematite\" then return Hematite elseif\n        ore == \"Natron\" then return Natron elseif\n        ore == \"Chromite\" then return Chromite elseif\n        ore == \"Limestone\" then return Limestone elseif\n        ore == \"Malachite\" then return Malachite elseif\n        ore == \"Garnierite\" then return Garnierite elseif\n        ore == \"Acanthite\" then return Acanthite elseif\n        ore == \"Petalite\" then return Petalite elseif\n        ore == \"Pyrite\" then return Pyrite elseif\n        ore == \"Cryolite\" then return Cryolite elseif\n        ore == \"Cobaltite\" then return Cobaltite elseif\n        ore == \"Kolbeckite\" then return Kolbeckite elseif\n        ore == \"Gold nuggets\" then return Gold_Nuggets elseif\n        ore == \"Columbite\" then return Columbite elseif\n        ore == \"Vanadinite\" then return Vanadinite elseif\n        ore == \"Illmenite\" then return Illmenite elseif\n        ore == \"Rhodonite\" then return Rhodonite elseif\n        ore == \"Thoramine\" then return Thoramine \n     end\nend\n\nfunction Split(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend\n\n\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-5"}, "key": "3"}, {"code": "screenContent = [[\n\n--------screenContent--------\n\nlocal Layer = createLayer()\nlocal ImagesLayer = createLayer()\nlocal rx, ry = getResolution()\nlocal cx,cy=getCursor()\n\nIndex = Index or 1 \n\nlocal json = require(\"dkjson\")\nlocal input = json.decode(getInput())\nlocal TotalWeight = input.TotalWeight\nlocal containerVolume = input.ContainerVolume\n\nlocal BiggestFont = loadFont(\"Play-Bold\", 50)\nlocal NormalFont = loadFont('Play', 24)\nlocal SmallFont = loadFont('RobotoCondensed', 18)\nlocal SmallestFont = loadFont('RobotoCondensed', 14)\n\n\n\nfunction DrawFrame(X,Y,Width,Height)\n    X = X - Width/2 -- centering\n    xo = 20 -- offset x for curve\n    yo = 20 -- offset y for curve\n    addLine(Layer, X, Y, X+Width,Y)-- top line\n    addLine(Layer, X, Y+Height, X+Width,Y+Height)-- bottom line\n    addLine(Layer,X,Y , X-xo, Y-yo)-- top left curve\n    addLine(Layer,X-xo, Y-yo , X-Width/4-xo, Y-yo)-- top left line\n    addLine(Layer,X-Width/4-xo, Y-yo , X-Width/4-xo-xo, Y)-- top left corner curve\n    addLine(Layer,X-Width/4-xo-xo, Y, X-Width/4-xo-xo, Y+Height)-- left line\n    addLine(Layer,X+Width+xo+Width/4+xo, Y, X+Width+xo+Width/4+xo, Y+Height)-- right line\n    addLine(Layer,X+Width,Y, X+Width+xo, Y-yo)-- top right curve\n    addLine(Layer,X+Width+xo, Y-yo , X+Width+xo+Width/4, Y-yo)-- top right line\n    addLine(Layer,X+Width+xo+Width/4, Y-yo , X+Width+xo+Width/4+xo, Y)-- top right corner curve\n    addLine(Layer,X+Width+xo+Width/4+xo, Y+Height , X+Width+xo+Width/4+xo-xo, Y+Height+yo)-- bottom right curve\n    addLine(Layer,X+Width+xo+Width/4+xo-xo, Y+Height+yo , X+Width+xo+xo-xo, Y+Height+yo)-- bottom right line\n    addLine(Layer,X+Width+xo+xo-xo, Y+Height+yo , X+Width+xo+xo-xo-xo, Y+Height+yo-yo)-- top right corner curve\n    addLine(Layer,X-Width/4-xo-xo, Y+Height , X-Width/4-xo-xo+xo, Y+Height+yo)-- bottom left curve\n    addLine(Layer,X-Width/4-xo-xo+xo, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4, Y+Height+yo)-- bottom left line\n    addLine(Layer,X-Width/4-xo-xo+xo+Width/4, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4+xo, Y+Height+yo-yo)-- bottom left corner curve\nend\n\nfunction AddText(align,color,font,text,x,y)\n    setNextTextAlign(Layer, align, AlignV_Middle)\n    setNextFillColor(Layer, color1.r, color1.g, color1.b, 1)  \n    addText(Layer, font, text, x,y) \nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(Layer, 2) \n    setNextStrokeColor(Layer,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(Layer, color1.r, color1.g, color1.b, 0.1)\n    addBoxRounded(Layer,X-Width/2,Y,Width,Height,5)\n    AddText(AlignH_Center,color1, Font,text2, X,Y+Height/2)\n    setNextFillColor(Layer, color2.r, color2.g, color2.b, 1)\n    addBoxRounded(Layer,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\nfunction DrawArrow(Arrow,X,Y)\n    local oX = rx*0.004\n    for i=1,6 do\n        if Arrow == \"left\" then\n            addLine(Layer,X,Y,X-oX*2,Y+oX*2)  \n            addLine(Layer,X-oX*2,Y+oX*2,X,Y+oX*4)  \n            X = X - rx*0.01\n        else\n            addLine(Layer,X,Y,X+oX*2,Y+oX*2)  \n            addLine(Layer,X+oX*2,Y+oX*2,X,Y+oX*4)  \n            X = X + rx*0.01\n        end\n    end\nend\n\nfunction DrawVProgressBar(D,X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(D, 1) \n    setNextStrokeColor(D,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, color1.r, color1.g, color1.b, 0.1)\n    addBoxRounded(D,X-Width/2,Y,Width,Height,5)\n    --AddText(AlignH_Center,fontColor,Font, text1, X,Y+Height-15)\n    AddText(AlignH_Center,fontColor,Font,text2, X,Y+Height-20)\n    setNextFillColor(D, color2.r, color2.g, color2.b, 1)\n    addBoxRounded(D,X-Width/2+5,Y+Height-Current*Height/Max,Width-10,Height-(Height-Current*Height/Max),5)\nend\n\n\nsetDefaultStrokeColor(Layer,Shape_Line,color2.r, color2.g, color2.b, 1)\nsetDefaultStrokeWidth(Layer,Shape_Line,6)\n\nlocal x = rx*0.6\nlocal y = ry*0.05\nlocal width = rx*0.46\nlocal height = ry*0.9\n\n\n\nif string.find(ScreenType, 'Vertical Sign') then\n  --  IconsPerPage = 21\n  --  IconSize = 32\n    x = rx*0.5\n    y = ry*0.025\n    width = rx*0.55\n    height = ry*0.72\nend\n\nlocal NumberOfPages = math.ceil(#L / IconsPerPage)\n\n\nDrawFrame(x,y,width,height) -- content frame\n\nsetDefaultStrokeWidth(Layer,Shape_Line,1)\n\nif cy > 0 and cy < ry then\n    if cx > x-width and cx < x then\n        DrawArrow(\"left\",x-width*0.61,y*0.58)\n        DrawArrow(\"left\",x-width*0.61,y+height-y*0.2)\n        if getCursorReleased() then Index = Index -1 end\n    end\n    if cx > x and cx < x+width then\n        DrawArrow(\"right\",x+width*0.61,y*0.58)\n        DrawArrow(\"right\",x+width*0.61,y+height-y*0.2)\n        if getCursorReleased() then Index = Index +1 end\n    end\nend\n\n\nif Index < 1 then Index = 1 end\nif Index > NumberOfPages then Index = NumberOfPages end\n\nAddText(AlignH_Center,fontColor,SmallestFont, \"Page \"..Index..\"/\"..NumberOfPages, x,y*0.5)\n\nif getDeltaTime() > 3 then\n    AddText(AlignH_Center,fontColor,SmallestFont,\"Board not started\",x,y+height+y*0.5)\nelse\n    DrawProgressBar(x,y+height+y*0.5,width,12,30,30-math.floor(input.NextUpdate),\"\",\"\",NormalFont)\nend\n\n\n\nlocal max = Index*IconsPerPage\nif max > #L then max = #L end\n\ny = ry*0.0785\nx = x-width\n\nlocal ShowIcons = false\nlocal Offset = 55\n\nif L[1] then\n    if L[1].i and ry ~= 1024 and IconsPerPage < 17 then\n        ShowIcons = true\n        Offset = 95+IconSize\n    end\nend\n\n\n\n--if IconSize == 32 then y = ry*0.055 end\n\nif string.find(ScreenType, 'Vertical Sign') then\n    Offset = 40\n    y = ry*0.04\n    --IconSize = 32\nend\n\n\n\n\nif Index > 0 then\n    for i = 1+(IconsPerPage*Index)-IconsPerPage, max do -- draw content\n        if ShowIcons then\n            image = loadImage(L[i].i)\n            addImage(ImagesLayer, image, x+Offset-IconSize,y, IconSize, IconSize)\n        end\n        AddText(AlignH_Left,fontColor,ContentFont,L[i].n, x+15+Offset, y+IconSize*0.5)\n        AddText(AlignH_Right,fontColor,ContentFont, L[i].w, x+width*1.81, y+IconSize*0.5)\n        y = y + IconSize + 2\n    end\nend\n\n\nif string.find(ScreenType, 'Vertical Sign') then\n    x = rx*0.5\n    y = ry*0.84\n    height = 40\n    DrawProgressBar(x,y+30+30+30,rx*0.8,height,ContainerMaxVolume,containerVolume,\"\",math.floor(containerVolume*100/ContainerMaxVolume)..\"%\",NormalFont)\n    AddText(AlignH_Center,fontColor,NormalFont,#L .. \" items  \".. TotalWeight .. \" tons\", x,y+5)\n    AddText(AlignH_Center,fontColor,NormalFont,math.floor(containerVolume/1000)..\" kl / \"..math.floor(ContainerMaxVolume/1000)..\" kl\", x,y+height*1.8)\n    AddText(AlignH_Center,fontColor,BiggestFont, Title, x,y-height)\n    if OreValue ~= '0' then AddText(AlignH_Center,fontColor,NormalFont, \"Ore: \"..OreValue..\" ħ\", x,y+height*0.9) end\nelse\n    x = rx*0.11\n    y = ry*0.35\n    height = ry*0.5\n    DrawVProgressBar(Layer,x,y-height*0.5,80,height,ContainerMaxVolume,containerVolume,\"\",math.floor(containerVolume*100/ContainerMaxVolume)..\"%\",NormalFont)\n    AddText(AlignH_Center,fontColor,NormalFont, Title, x,y-height*0.6)\n    AddText(AlignH_Center,fontColor,NormalFont,math.floor(containerVolume/1000)..\" kl / \"..math.floor(ContainerMaxVolume/1000)..\" kl\", x,y-40-40+height)\n    AddText(AlignH_Center,fontColor,NormalFont,TotalWeight .. \" tons\", x,y-40+height)    \n    AddText(AlignH_Center,fontColor,NormalFont,#L .. \" items\", x,y+height)\n    if OreValue ~= '0' then AddText(AlignH_Center,fontColor,SmallFont, \"Ore: \"..OreValue..\" ħ\", x,y+height+40) end\nend\n\n    \n\nAddText(AlignH_Center,fontColor,SmallestFont, \"ContainerMonitor v\"..Version, x,ry*0.978)\n\nrequestAnimationFrame(100)\n]]", "filter": {"args": [], "signature": "onStart()", "slotKey": "-5"}, "key": "4"}], "methods": [], "events": []}
