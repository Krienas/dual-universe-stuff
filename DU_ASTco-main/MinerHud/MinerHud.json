{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local itemsList = json.decode(hub.getItemsList())\ntotal = 0\noreList = {}\nfor entry,itemData in pairs(itemsList) do\n    if isOre(itemData.name) then\n        total = total + price(itemData.name)*math.floor(itemData.quantity) \n        if itemData.quantity > 1000 then\n            quantity = reformatInt(math.floor(itemData.quantity/1000)) .. \"k\"\n        else\n            quantity = reformatInt(math.floor(itemData.quantity))\n        end\n        oreList[#oreList+1] = quantity .. \" \" ..  itemData.name\n    end\nend\n\n","filter":{"args":[],"signature":"storageAcquired()","slotKey":"0"},"key":"0"},{"code":"-----------------------------------------------------\n-- Container\n-----------------------------------------------------\ncontainerVolume = hub.getItemsVolume()\ncontainerPercent = math.floor((containerVolume*100)/cargo)\ncontainerMass = reformatInt(math.floor(hub.getItemsMass()/1000))\n\n-----------------------------------------------------\n-- Timer \n-----------------------------------------------------\nseconds = seconds +1\nif seconds == 60 then\n    seconds = 0\n    time = time +1\n    containerVolumeOld = containerVolumeOld or 0\n    -- checking if container volume has changed before sending acquireStorage to reduce calls\n    if containerVolumeOld ~= containerVolume then \n        hub.acquireStorage()\n        containerVolumeOld = containerVolume\n        system.print(\"sending acquireStorage\")\n    end\nend\n\n-----------------------------------------------------\n-- Warp cells calculation \n-----------------------------------------------------\nwarpcells = math.floor(((core.getConstructMass and core.getConstructMass() or 1000)/1000) * distance/200000 * 0.00025);\nif warpcells < 1 then warpcells = 1 end\n\n-----------------------------------------------------\n-- Ores value calculation \n-----------------------------------------------------\nores = \"\"\nif oreList then\n    if next(oreList) ~= nil then\n        for key,value in pairs(oreList) do\n            ores = ores .. value .. \"<br>\"\n        end\n        ores = ores .. \"Value: \" .. reformatInt(total) .. \" Ä§<br>\"\n    end\nend\n\n\n-----------------------------------------------------\n-- Radar \n-----------------------------------------------------\nif radar ~= nil then     \n    radarTargets = #radar.getConstructIds()\n    radarHTML = \"Radar: \" .. radarTargets .. \"/\" .. radarTargetsOld\n    if radarTargets > radarTargetsOld then\n        triggerAlert = true        \n    end\n    radarTargetsOld = radarTargets   \nelse\n    radarHTML = \"\"\nend\n\n-----------------------------------------------------\n-- Html \n-----------------------------------------------------\ncontent = styleHTML .. \n[[<div class='topbar'>\n    <span> ]] .. radarHTML .. [[ </span>\n    <span> ]] .. time .. [[ minutes</span> \n    <span> ]] .. atlas[0][warpTo].name[1] .. [[: ]] .. warpcells .. [[ cells </span> \n</div>\n\n<div class=\"container\">]] .. containerMass .. [[ tons <span style=\"float: right;\">]] .. containerPercent .. [[%</span>\n    <div class=\"progressbar\">\n        <div style=\"width: ]] .. containerPercent .. [[%;\"></div>\n    </div>\n    <div class='ores'>]] .. ores .. [[</div>\n</div>]]\n\n\nif triggerAlert == true then content = content .. [[<div class='alert'>RADAR ALERT</div>]] end \n\nif showHelp == true then content = content .. helpHTML end\n\n-----------------------------------------------------\n-- Screen \n-----------------------------------------------------\ncontentOld = contentOld or \"\"\nif contentOld ~= content then\n    system.setScreen(content)\n    contentOld = content\n    --system.print(\"set screen content\")\nend","filter":{"args":[{"value":"upd"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"remoteController = true --export\n\nwarpTo = 1 --export: warp destination, to calculate cells cost (1=Madis, 2=Alioth, 3=Thades, 4=Talemai, 5=Feli, 6=Sicari, 7=Sinnen, 8=Teoma, 9=Jago)\n--radarThreshold = 1 --export: will show on-screen alert if number of radar targets is above this value\ncargo = 768000 --export: cargo capacity (liters)\n\nBauxite = 35 --export: Bauxite market value\nCoal = 45 --export: Coal market value\nQuartz = 30 --export: Quartz market value\nHematite = 35 --export: Hematite market value\nNatron = 78 --export: Natron market value\nChromite = 130 --export: Chromite market value\nLimestone = 145 --export: Limestone market value\nMalachite = 80 --export: Malachite market value\nGarnierite = 140 --export: Garnierite market value\nAcanthite = 128 --export: Acanthite market value\nPetalite = 900 --export: Petalite market value\nPyrite = 900 --export: Pyrite market value\nCryolite = 1880 --export: Cryolite market value\nCobaltite = 2000 --export: Cobaltite market value\nKolbeckite = 2640 --export: Kolbeckite market value\nGold_Nuggets = 1800 --export: Gold_Nuggets market value\nColumbite = 450 --export: Columbite market value\nVanadinite = 950 --export: Vanadinite market value\nIllmenite = 1500 --export: Illmenite market value\nRhodonite = 420 --export: Rhodonite market value\nThoramine = 0 --export: Thoramine market value\n\nversion = 0.21\nsystem.print(\"----------------------------------------------------\")\nsystem.print(\"--------------- Miner Hud v\" .. version .. \" --------------\")\nsystem.print(\"----------------------------------------------------\")\n\nfor e,f in pairs(unit)do    \n    if type(f)==\"table\"and type(f.export)==\"table\"then\n        if f.getElementClass then\n            if f.getElementClass()==\"ItemContainer\" and e == \"slot1\" then\n                hub=f                \n            elseif f.getElementClass()==\"CoreUnitDynamic\"then \n                core=f\n            elseif f.getElementClass()==\"RadarPVPSpaceSmallGroup\"then \n                radar=f\n            end \n        end \n    end \nend\n\nif hub == nil then\n    system.print(\"Hub not found or not linked to slot1\")\n    unit.exit()\nend\n\nif core == nil then\n    system.print(\"Core not found\")\n    unit.exit()\nend\n\nif radar == nil then\n    system.print(\"Radar not found (optional)\")    \nelse\n    radarTargetsOld = #radar.getConstructIds()\nend\n\n-- check if control unit is remote and set engines\nif remoteController == true then\n    unit.deactivateGroundEngineAltitudeStabilization()    \n    unit.setEngineCommand(\"ALL\",{0,0,0},{0,0,0},0,0,'','','',0)\n    unit.setEngineCommand(\"adjustor\",{0,0,0},{0,0,0},0,0,'','','',0)\n    unit.setEngineThrust (\"ALL\", 0)\n    unit.setEngineThrust (\"adjustor\", 0)\nend\n\n\ntime,seconds,total = 0,0,0\n--oreList = {}\nunit.setTimer(\"upd\",1)\nunit.hide()\nsystem.freeze(0)\nsystem.showScreen(1)\natlas = require('atlas')\ndistance = (vec3(core.getConstructWorldPos()) - vec3(atlas[0][warpTo].center)):len()\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"showHelp = not showHelp\n\nsystem.print(tostring(showHelp))\n\n--if displayHudPanel == true then\n  --  displayHudPanel = false\n--else\n  --  displayHudPanel = true\n--end","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"3"},{"code":"triggerAlert = false","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"4"},{"code":"showRadar = not showRadar\n\nif showRadar == true then\n    panel = system.createWidgetPanel(\"Radar\")\n    widget = system.createWidget(panel, \"radar\")\n    system.addDataToWidget(radar.getDataId(), widget)\nelse\n    system.destroyWidgetPanel(panel)\nend\n","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"5"},{"code":"-----------------------------------------------------\n-- Html\n-----------------------------------------------------\nstyleHTML = [[\n<style>\n* {\n    text-shadow: 2px 2px black;\n   \n}\n\n.container{\n    position: absolute;\n    width: 15vh;\n    right: 2vh;\n    top: 13vh;\n    line-height: 3vh;\n}\n\n.progressbar {\n    background-color: rgba(20, 32, 39, 0.6);\n    -webkit-border-radius:5px;\n    border: 1px solid white;\n}\n\n.progressbar>div {\n    background-color: rgba(240, 230, 230, 0.7);\n    width: 100%;\n    height: 1.8vh;  \n}\n\n.ores {\n   /* position: absolute;\n    top: 8vh;\n    right: 1vh;*/\n    line-height: 2.6vh;  \n    /*  background-color: rgba(20, 32, 39, 0.6);\n    -webkit-border-radius:5px;\n    border: 1px solid black;*/\n    text-align: center;\n    padding: 0.5vh;\n}\n\n.topbar{\n    position: absolute;\n    display: flex;    \n    justify-content: space-between;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    top: 0.4vh;\n    font-size: 1.4vh;\n    width: 30%;\n}\n\n.alert{  \n    position: absolute;\n    top: 6vh;  \n    font-size: 3vh;\n    color: red;\n    font-weight: bold;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    width: 30vw;  \n    text-align: center;\n}\n\n.help{\n    position: absolute;\n    left: 1vh;\n    background-color: rgba(20, 32, 39, 0.6);\n    -webkit-border-radius:5px;\n    border: 1px solid black;\n    text-align: left;\n    padding: 0.5vh;\n    line-height: 3vh;  \n}\n\n.showhelp {\n    position: absolute;\n    left: 1vh;\n    top: 0.4vh;\n    font-size: 1vh;\n}\n</style>\n\n<div class=\"showhelp\">Alt + 1 = Show Help</div>\n\n]]\n\nhelpHTML = [[\n\n<div class='help'>\nAlt + 1 = Show / Hide Help Panel<br>\nAlt + 2 = Hide current radar alert<br>\nAlt + 3 = Show / Hide Radar Widget<br>\nCtrl + Backspace = Exit script\n</div>\n\n]]\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"6"},{"code":"-----------------------------------------------------\n-- Functions\n-----------------------------------------------------\n\nfunction reformatInt(i)\n  return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction isOre(name)\n    if name == \"Bauxite\" or\n        name == \"Coal\" or\n        name == \"Quartz\" or\n        name == \"Hematite\" or\n        name == \"Natron\" or\n        name == \"Chromite\" or\n        name == \"Limestone\" or\n        name == \"Malachite\" or\n        name == \"Garnierite\" or\n        name == \"Acanthite\" or\n        name == \"Petalite\" or\n        name == \"Pyrite\" or\n        name == \"Cryolite\" or\n        name == \"Cobaltite\" or\n        name == \"Kolbeckite\" or\n        name == \"Gold nuggets\" or\n        name == \"Columbite\" or\n        name == \"Vanadinite\" or\n        name == \"Illmenite\" or\n        name == \"Rhodonite\" or\n        name == \"Thoramine\" then\n        return true\n    else return false\n    end\nend\n\nfunction price(ore)\n    if ore == \"Bauxite\" then return Bauxite elseif\n        ore == \"Coal\" then return Coal elseif\n        ore == \"Quartz\" then return Quartz elseif\n        ore == \"Hematite\" then return Hematite elseif\n        ore == \"Natron\" then return Natron elseif\n        ore == \"Chromite\" then return Chromite elseif\n        ore == \"Limestone\" then return Limestone elseif\n        ore == \"Malachite\" then return Malachite elseif\n        ore == \"Garnierite\" then return Garnierite elseif\n        ore == \"Acanthite\" then return Acanthite elseif\n        ore == \"Petalite\" then return Petalite elseif\n        ore == \"Pyrite\" then return Pyrite elseif\n        ore == \"Cryolite\" then return Cryolite elseif\n        ore == \"Cobaltite\" then return Cobaltite elseif\n        ore == \"Kolbeckite\" then return Kolbeckite elseif\n        ore == \"Gold nuggets\" then return Gold_Nuggets elseif\n        ore == \"Columbite\" then return Columbite elseif\n        ore == \"Vanadinite\" then return Vanadinite elseif\n        ore == \"Illmenite\" then return Illmenite elseif\n        ore == \"Rhodonite\" then return Rhodonite elseif\n        ore == \"Thoramine\" then return Thoramine \n    end\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"7"}],"methods":[],"events":[]}
